# A node is one of the core elements in the OpenStreetMap data model. It consists of a single point in space defined by its latitude, longitude and node id.
type Node {
  # GraphQL id string
  id: ID!
  # Geojson object in string format
  geometry: String!
  # Node ids are unique between nodes. (However, a way or a relation can have the same id number as a node.) Editors may temporarily save node ids as negative to denote ids that haven't yet been saved to the server. Node ids on the server are persistent, meaning that the assigned id of an existing node will remain unchanged each time data are added or corrected. Deleted node ids must not be reused, unless a former node is now undeleted.
  osmId: String!
  # see OSM wiki https://wiki.openstreetmap.org/wiki/Changeset
  changeset: Int!
  # The edit version of the object. Newly created objects start at version 1 and the value is incremented by the server when a client uploads a new version of the object. The server will reject a new version of an object if the version sent by the client does not match the current version of the object in the database.
  version: Int!
  # W3C standard date and time formats. https://www.w3.org/TR/NOTE-datetime Time of the last modification (e.g. "2016-12-31T23:59:59.999Z").
  timestamp: String!
  # A set of key/value pairs, with unique key
  tags: String!
  # Latitude coordinate in degrees (North of equator is positive) using the standard WGS84 projection. Some applications may not accept latitudes above/below ±85 degrees for some projections.
  lat: Float!
  # Longitude coordinate in degrees (East of Greenwich is positive) using the standard WGS84 projection. Note that the geographic poles will be exactly at latitude ±90 degrees but in that case the longitude will be set to an arbitrary value within this range.
  lon: Float!
}

# In OSM notation this is a Relation. A relation is a group of elements. In more technical terms, it is one of the core data elements and consists of one or more tags and an ordered list of one or more nodes, ways and/or relations as members which is used to define logical or geographic relationships between other elements. A member of a relation can optionally have a role which describes the part that a particular feature plays within a relation. https://wiki.openstreetmap.org/wiki/Relation
type Edge {
  # GraphQL id string
  id: ID!
  # The length of a feature. https://wiki.openstreetmap.org/wiki/Key:length
  len: String!
  # undocumented?
  v: String!
  # udocumented? #
  u: String!
  # Geojson object in string format
  geometry: String!
  # The key type is commonly used to set a relation's type. https://wiki.openstreetmap.org/wiki/Key:type
  osm_type: String!
  # A set of key/value pairs, with unique key
  tags: String!
  # The edit version of the object. Newly created objects start at version 1 and the value is incremented by the server when a client uploads a new version of the object. The server will reject a new version of an object if the version sent by the client does not match the current version of the object in the database.
  version: Int!
  # W3C standard date and time formats. https://www.w3.org/TR/NOTE-datetime Time of the last modification (e.g. "2016-12-31T23:59:59.999Z").
  timestamp: String!
  # Node ids are unique between nodes. (However, a way or a relation can have the same id number as a node.) Editors may temporarily save node ids as negative to denote ids that haven't yet been saved to the server. Node ids on the server are persistent, meaning that the assigned id of an existing node will remain unchanged each time data are added or corrected. Deleted node ids must not be reused, unless a former node is now undeleted.
  osmId: String!
  # The key width describes the actual width of a way or other feature. By default, values will be interpreted as metres. To reduce the risk of misunderstandings, or if the width should be specified in a different unit, the unit can be added to the end of the value, separated by a space (see #Examples). The value should always use the dot as decimal separator, if needed. 
  width: String!
  # tunnel=* is used for roads, railway line, canals etc that run in a tunnel. 
  tunnel: String!
  # The surface key is used to provide additional information about the physical surface of roads/footpaths and some other features, particularly regarding material composition and/or structure. Originally concerned about the surface in relation to transport and sports and more commonly used on linear features it is now increasingly used with certain areas of type natural=*. For broader descriptions of surfaces see Landcover. 
  surface: String!
  # This key is used for designated combined cycle- and footways. If both have their own lane, tag segregated=yes. If they share one lane, tag segregated=no. This key has no default value and tagging it is useful in many cases! 
  segregated: String!
  # The service tag provides additional information that depends on the context of a more "top level" tag on the same object. (service=* should not appear in isolation.) It is used to describe details about types of "service" roads, railways or waterways; or the service or services offered by a business. 
  service: String!
  # PSV stands for Public Service Vehicles. Use this tag for roads or lanes which are designated to public vehicles. More specific tag may be needed if only some specific public vehicles are allowed. 
  psv: String!
  # Using the overtaking=* tag to specify the legal status of overtaking (also known as passing) on a section of road, which may either be indicated by markings on the road or by a traffic sign. Overtaking means to catch up with and move in front of another vehicle or person while traveling in the same direction. 
  overtaking: String!
  # The oneway tag is used to indicate the access restriction on highways and other linear features for vehicles as appropriate. This means that this tag should be used when this way can only be used in one direction by vehicles. Note that a no entry sign prohibiting entry from one side or across one point of the road, does not automatically imply that the entire road is oneway (look for oneway signs along the road). 
  oneway: String!
  # name of the edge location
  name: String!
  # Legal access restriction for all  motor vehicles (car, motorcycles, HGV, bus ...) 
  motor_vehicle: String!
  # Legal access permission for  cars (automobiles). This is normally derived from traffic signs placed along the road. However, the symbol depicting a (passenger) car on traffic signs has a very different legal meaning (scope) depending on the type of traffic sign it is depicted on. 
  motorcar: String!
  # The maxspeed=* tag is used on ways to define the maximum legal speed limit for general traffic on a particular road, railway or waterway. By default, values will be interpreted as kilometres per hour. If the speed limit should be specified in a different unit the unit can be added to the end of the value, separated by a space (see Examples). The tag is also used on nodes to specify maxspeed traffic signs. 
  maxspeed: String!
  # The key lit=* indicates the presence of lighting. 
  lit: String!
  # Use the lanes=* key to tag how many traffic lanes there are on a highway (described on this page) or other features like a piste or running track (described on the respective pages). To tag individual lanes of a road, see the article about the lanes suffix. Count excludes cycle lanes and motorcycle lanes that do not permit a motor vehicle. For tagging cycle lanes see cycleway=*. For tagging motorcycle lanes see motorcycle=* or lanes. 
  lanes: Int!
  # "int_ref" stands for "international reference" and is used for international reference numbers or codes. 
  int_ref: String!
  # The key highway=* is the main key used for identifying any kind of road, street or path. The value of the key helps indicate the importance of the highway within the road network as a whole. See the table below for an ordered list from most important (motorway) to least important (service). 
  highway: String!
  # The key footway=* refines the tag highway=footway for sidewalk (called pavements/footways in UK) mapping. 
  footway: String!
  # undocumented ?
  foot: String!
  # Add the cycleway=* tag to a highway=* to map cycling infrastructure that is an inherent part of the road. This specifically applies to cycle lanes which are always a part of the road, and often also applies to separated cycle tracks if they are running parallel and next to the road. 
  cycleway: String!
  # The key bridge=* is a property to describe that a way is on a bridge. It can be combined with several types of ways such as roads, railways, path canals, pipelines or similar. 
  bridge: String!
  # Legal restriction for cyclists. 
  bicycle: String!
  # The area=yes tag is required for some closed ways when used to define an Area (polygon); however, for closed ways with other tags there is an assumption that the way defines an area. In some circumstances a closed way may define both a closed polyline and also an area. 
  area: String!
  # Access values describe restrictions on the use of highways and other transportation routes (railways, waterways), as well as facilities such as buildings, building entrances, amenities and leisure entities. 
  access: String!
}

type PointOfInterest {
  id: ID!
  # see osm wiki https://wiki.openstreetmap.org/wiki/Item:Q1044
  addr_full: String!
  # The name of a city/village (locality), like used as a part of a postal address
  addr_city: String!
  # The country code of the current address. Note that it can be derived in most cases from mapped boundaries of countries. Use the ISO 3166-1 alpha-2 two letter country code in upper case. Example: "GB" for the United Kingdom (not "UK"!), "DE" for Germany, "CH" for Switzerland, "AT" for Austria, "FR" for France, "IT" for Italy.
  addr_country: String!
  # The house number (may contain non-digits). If a single entry has multiple house numbers, separate them by ",". e.g. "12b,12c". Only required key for an address (except when key:addr:housename is used), all others are optional.
  addr_housenumber: String!
  # see osm wiki https://wiki.openstreetmap.org/wiki/Item:Q1047
  addr_housename: String!
  # The postal code of the building/area.
  addr_postcode: String!
  # The street name portion of an address
  addr_street: String!
  # Used when addr:housenumber =* is not grouped per street and by other object, usually a settlement.
  addr_place: String!
  # email address associated with building
  email: String!
  # name of the building
  name: String!
  # opening hours of operation if available
  opening_hours: String!
  # The operator tag is used to name a company, corporation, person or any other entity who is directly in charge of the current operation of a map object.
  operator: String!
  # phone=number where the number should be in international (ITU-T E.164) format  https://en.wikipedia.org/wiki/E.164
  phone: String!
  # access to building is private or public
  private_or_public: String!
  # url associated with building. interchangable with website according to osm wiki https://wiki.openstreetmap.org/wiki/Key:url
  url: String!
  # The website=* tag can be used to provide the full URL to the official website for the related features, be it a building, park railway or anything else.
  website: String!
  # The most basic use is building=yes, but the value may be used to classify the type of building. Note that it may be not the same as the building's current use (tagged using building:use=*). For example, a hospital building that is abandoned or repurposed to be a marketplace is still a building=hospital, and to mark active hospitals amenity=hospital is used.
  building: String!
  # For describing useful and important facilities for visitors and residents. Facilities include for example toilets, telephones, banks, pharmacies, prisons and schools. https://wiki.openstreetmap.org/wiki/Key:amenity
  amenity: String!
  # The building:levels tag is used for marking the number of above-ground levels of a building (building=*) or part of a building (building:part=*). The underground levels and the roof do not count as levels here. However, levels that are part-way underground do count (see example below). For the purposes of this tag, "ground level" is defined to be the lowest entrance to a building.
  building_levels: String!
  # Mainly used to describe the primary use of land by humans. For general information on mapping/classifying land areas see Land use and areas of natural land. See Landcover for general information on tagging the physical appearance of land and Proposed features/landcover for a proposal to more clearly separate the concepts.
  landuse: String!
  # An office is a place of business where administrative or professional work is carried out. See the page titled Office for an introduction on its usage. https://wiki.openstreetmap.org/wiki/Office
  office: String!
  # Use shop=* to mark the location of a shop and the products that it sells.
  shop: String!
  # The source=* tag can be used to indicate the source of some information (i.e. meta data) added to OpenStreetMap. This tag could be useful for verification and to assist future editors who may wish to understand the origins of the data they are modifying.
  source: String!
  # start_date=* can be used to indicate the date the feature opened or construction of the feature finished (i.e. started to exist as feature).
  start_date: String!
  # Use wikipedia=language:page title to provide a reference to an article in Wikipedia about the feature.
  wikipedia: String!
  # Node ids are unique between nodes. (However, a way or a relation can have the same id number as a node.) Editors may temporarily save node ids as negative to denote ids that haven't yet been saved to the server. Node ids on the server are persistent, meaning that the assigned id of an existing node will remain unchanged each time data are added or corrected. Deleted node ids must not be reused, unless a former node is now undeleted.
  osmId: String!
  # W3C standard date and time formats. https://www.w3.org/TR/NOTE-datetime Time of the last modification (e.g. "2016-12-31T23:59:59.999Z").
  timestamp: String!
  # The edit version of the object. Newly created objects start at version 1 and the value is incremented by the server when a client uploads a new version of the object. The server will reject a new version of an object if the version sent by the client does not match the current version of the object in the database.
  version: Int!
  # Geojson object in string format
  geometry: String!
  # A set of key/value pairs, with unique key
  tags: String!
  # The key type is commonly used to set a relation's type. https://wiki.openstreetmap.org/wiki/Key:type
  osm_type: String!
  # This tag is for indication that a map entity such as a building, a shop, restaurant, etc. offers internet access to the public, either as a paid service or even for free.
  internet_access: String!
  # see OSM wiki https://wiki.openstreetmap.org/wiki/Changeset
  changeset: Int!
  # The key craft=* is used for a place producing or processing customized goods.
  craft: String!
  # Latitude coordinate in degrees (North of equator is positive) using the standard WGS84 projection. Some applications may not accept latitudes above/below ±85 degrees for some projections.
  lat: Float!
  # Longitude coordinate in degrees (East of Greenwich is positive) using the standard WGS84 projection. Note that the geographic poles will be exactly at latitude ±90 degrees but in that case the longitude will be set to an arbitrary value within this range.
  lon: Float!
  # An automated teller machine (ATM), or automatic banking machine (ABM), or "cash machine", is a computerised telecommunications device that provides the clients of a financial institution with access to financial transactions in a public space without the need for a cashier, human clerk or bank teller. 
  atm: String!
  # The type of bicycle parking, always used together with amenity=bicycle_parking. 
  bicycle_parking: String!
  # Describes type of cafe tagged with tag amenity=cafe by additional tag cafe=*. 
  cafe: String!
  # This tag is used for places where children are looked after, including a nursery or daycare which takes care of small children who are too young for amenity=kindergarten or preschool, and after-school childcare facilities. 
  childcare: String!
  # The parking key can be used together with amenity=parking to specify the type of parking facility. 
  parking: String!
  # A social facility is any place where social services are conducted. 
  social_facility: String!
  # The tag books=* may be used in combination with shop=books, amenity=library or amenity=public_bookcase to give further information if only special kind of books are sold. You can use several values, separated by semicolons, if the shop sells different kinds of books. For most of the common bookshops this tag will not be needed. 
  books: String!
  # A butcher is a shop primarily selling meat or meat products. The shop may offer other farm produce/groceries or general convenience store items, but primarily sells meat. 
  butcher: String!
  # The clothes=* tag may be used in combination with shop=clothes to give further information on the kind of clothes sold. You can use several values, separated by semicolons, if the shop sells different kinds of clothes. 
  clothes: String!
  # Shop focused on selling erotic toys, -clothes or other erotic stuff. 
  erotic: String!
  # Shop focused on selling religious articles, church shop. See also religion=* 
  religion: String!
  # A shop buying and selling used clothes and other things. See also shop=pawnbroker 
  second_hand: String!
  # The tourism=information describes an information source for tourists, travellers and visitors. But it does not differ between diverse types of an information point. This key helps refine this tag a little bit more, so it should be easier to find the right information point on a map. 
  information: String!
  # Places and things of specific interest to tourists including places to see, places to stay, things and places providing information and support to tourists. Tourism features can often be represented using either a node or an area and can be combined with other tags. For example a building that is a museum could be tagged as building=yes and tourism=museum. 
  tourism: String!
  # Legal restriction for cyclists. 
  bicycle: String!
  # The property coffee=yes describes a business in which coffee is served. This may be e.g. a kiosk shop=kiosk or shop=coffee. The coffee can be offered in standing, sitting or to go. 
  coffee: String!
  # The collection times of a post box, recycling container or other fixed location drop-off facility. The syntax is the same as for opening hours, including the hyphen because there are post boxes which are emptied several (undefined) times or one (undefined) time in a certain time frame. 
  collector: String!
  # A shop or kiosk offering a clothes dry cleaning service. The actual cleaning may be done elsewhere. 
  dry_cleaning: String!
  # Keys beginning with the prefix fuel:*=* indicate which types of fuel are available at a amenity=fuel, railway=fuel, waterway=fuel, aeroway=fuel, or shop=fuel. The keys are also used on amenity=bbq and man_made=kiln to describe the fuels used with the installed infrastructure, or to clarify the type of fuel indicated by substance=fuel or content=fuel. 
  fuel: String!
  # The key furniture describes the kind of furniture sold in a shop. 
  furniture: String!
  # The key massage=* is used to denote a type of massage. See shop=massage . The shop=massage tag is used to tag massage shops. 
  massage: String!
  # A shop that sells motorcycles and/or related accessories, clothes, parts, and rental services. 
  motorcycle: String!
  # A shop that primarily sells recorded music (vinyl/CDs). Can be called a "record shop"/" record store". 
  music: String!
  # Shop focused on selling organic food. Alternatively you can use the more versatile organic=* in combination with a general shop=* key (In this case: shop=supermarket or shop=convenience). 
  organic: String!
  # Shop focused on selling camping, walking, climbing, and other outdoor sports equipment (GPSes, etc.) 
  outdoor: String!
  # A shop for pets, animals and toys or food for them. 
  pet: String!
  # Shop focused on selling one or more building supplies such as timber/wood, cement etc. See also shop=doityourself 
  trade: String!
  # This tag is deprecated. Please use shop=alcohol + drink:wine=yes instead 
  wine: String!
  # The attraction key covers all kinds of dedicated attractions, especially the features commonly found in theme parks, water parks, and zoos. 
  attraction: String!
  # A museum is an institution which normally has exhibitions on scientific, historical, cultural topics, etc. Typically open to the public as a tourist attraction, museums may be more heavily involved in acquisitions, conservation or research. 
  museum: String!
  # The tag amenity=bar is used to map a bar: a purpose-built commercial establishment that sells alcoholic drinks to be consumed on the premises. They are characterised by a noisy and vibrant atmosphere, similar to a party. They usually do not sell food to be eaten as a meal. The music is usually loud and you often have to stand. Sometimes it has a dancefloor, but it's not the main attraction. 
  bar: String!
  # A  car wash is a facility used to clean the exterior and, in some cases, the interior of motor vehicles. Car washes can be self-serve, fully automated, or full-service with attendants who wash the vehicle. There are also washing facilities for trucks, buses and trains. 
  car_wash: String!
  # Drinking water is a place where humans can obtain potable water for consumption. Typically, the water is used for only drinking. This includes the  drinking fountain or bubbler, water taps, water wells, springs and water points. 
  drinking_water: String!
  # The leisure key is for places people go in their spare time. See also sport=* and tourism=*. 
  leisure: String!
  # The tag leisure=outdoor_seating is used to map a seating area located outside, usually for the consumption of food and drink from neighbouring cafes and restaurants, often belonging to one or more of them, but not necessarily adjacent. 
  outdoor_seating: String!
  # Marks a children's playground, playpark, or play area. These are outdoor (sometimes indoor) areas specifically designed for children to play. Often they provide equipment such as swings, slides, climbing frames and roundabouts. They are often part of a larger park, but are also found in residential areas and schools. 
  playground: String!
  # The tag shop=caravan is used to map a business that primarily sells recreational vehicles such as towed caravans (a.k.a travel trailers, pop-tops, camper trailers, tent trailers, 5th wheelers etc); powered, self-propelled motorhomes (camper vans, expedition vehicles, truck trailers / slide-ons etc); & similar types of vehicle. 
  caravan: String!
  # A golf store also known as a Pro Shop is a shop that sells golf equipment. 
  golf: String!
  # A store that sells swimming pool equipment and supplies. 
  swimming_pool: String!
  # An establishment that exclusively, or primarily, sells drinking water. 
  water: String!
  # A  warehouse club or  cash and carry is a large store which sells items in bulk. Many warehouse clubs require a membership fee; membership=* may be used to indicate mandatory membership. 
  wholesale: String!
  # A place where tourists, visitors, hikers might like to visit and take photographs. A place, often high, with a good view of surrounding countryside or notable buildings. Sometimes called a vista point or scenic area/point, lookout or overlook. 
  viewpoint: String!
  # Zoo is a place that has confined animals on display for viewing by the public. In addition, a zoo may also include unusual specimens of plants. 
  zoo: String!
  # The tag amenity=gambling is used to map a place for gambling which is not a bookmaker, lottery shop, casino, or adult gaming centre (slots or pachinko): for example, a bingo hall. 
  gambling: String!
  # Used to tag a theatre where live performances occur, such as plays, musicals and formal concerts. 
  theatre: String!
  # A  fitness station, outdoor gym, Street Workout, Calisthenics Park or trim trail is an outdoor facility, a single or a collection of exercise equipment. This is typically operated by a local government and free to use for everyone. Often along a fitness route or inside a park. 
  fitness_station: String!
  # see osm wiki https://wiki.openstreetmap.org/wiki/Points_of_interest
  poi_type: String!
}

# The definition of "building" is not straightforward. The OpenStreetMap definition is quite wide and includes not only objects considered as buildings by strict definitions but also building=static_caravan, building=houseboat and may include at least some building=storage_tank.
type Building {
  # GraphQL id string
  id: ID!
  # phone=number where the number should be in international (ITU-T E.164) format  https://en.wikipedia.org/wiki/E.164
  phone: String!
  # The name of a city/village (locality), like used as a part of a postal address
  addr_city: String!
  # The country code of the current address. Note that it can be derived in most cases from mapped boundaries of countries. Use the ISO 3166-1 alpha-2 two letter country code in upper case. Example: "GB" for the United Kingdom (not "UK"!), "DE" for Germany, "CH" for Switzerland, "AT" for Austria, "FR" for France, "IT" for Italy.
  addr_country: String!
  # see osm wiki https://wiki.openstreetmap.org/wiki/Item:Q1044
  addr_full: String!
  # The house number (may contain non-digits). If a single entry has multiple house numbers, separate them by ",". e.g. "12b,12c". Only required key for an address (except when key:addr:housename is used), all others are optional.
  addr_housenumber: String!
  # see osm wiki https://wiki.openstreetmap.org/wiki/Item:Q1047
  addr_housename: String!
  # The postal code of the building/area.
  addr_postcode: String!
  # The street name portion of an address
  addr_street: String!
  # Used when addr:housenumber =* is not grouped per street and by other object, usually a settlement.
  addr_place: String!
  # email address associated with building
  email: String!
  # name of the building
  name: String!
  # opening hours of operation if available
  opening_hours: String!
  # The operator tag is used to name a company, corporation, person or any other entity who is directly in charge of the current operation of a map object.
  operator: String!
  # access to building is private or public
  private_or_public: String!
  # url associated with building. interchangable with website according to osm wiki https://wiki.openstreetmap.org/wiki/Key:url
  url: String!
  # The website=* tag can be used to provide the full URL to the official website for the related features, be it a building, park railway or anything else.
  website: String!
  # The most basic use is building=yes, but the value may be used to classify the type of building. Note that it may be not the same as the building's current use (tagged using building:use=*). For example, a hospital building that is abandoned or repurposed to be a marketplace is still a building=hospital, and to mark active hospitals amenity=hospital is used.
  building: String!
  # For describing useful and important facilities for visitors and residents. Facilities include for example toilets, telephones, banks, pharmacies, prisons and schools. https://wiki.openstreetmap.org/wiki/Key:amenity
  amenity: String!
  # The building:levels tag is used for marking the number of above-ground levels of a building (building=*) or part of a building (building:part=*). The underground levels and the roof do not count as levels here. However, levels that are part-way underground do count (see example below). For the purposes of this tag, "ground level" is defined to be the lowest entrance to a building.
  building_levels: String!
  # The key building:material=* is used to describe the outer surface material of building walls, also know as the facade or façade.
  building_material: String!
  # For marking the number of levels of a building (building=*) or part of a building (building:part=yes) above ground level we use tag building:levels=*.
  building_min_level: String!
  # The key height=* describes the actual height of a feature.
  height: String!
  # Mainly used to describe the primary use of land by humans. For general information on mapping/classifying land areas see Land use and areas of natural land. See Landcover for general information on tagging the physical appearance of land and Proposed features/landcover for a proposal to more clearly separate the concepts.
  landuse: String!
  # An office is a place of business where administrative or professional work is carried out. See the page titled Office for an introduction on its usage. https://wiki.openstreetmap.org/wiki/Office
  office: String!
  # Use shop=* to mark the location of a shop and the products that it sells.
  shop: String!
  # The source=* tag can be used to indicate the source of some information (i.e. meta data) added to OpenStreetMap. This tag could be useful for verification and to assist future editors who may wish to understand the origins of the data they are modifying.
  source: String!
  # start_date=* can be used to indicate the date the feature opened or construction of the feature finished (i.e. started to exist as feature).
  start_date: String!
  # Use wikipedia=language:page title to provide a reference to an article in Wikipedia about the feature.
  wikipedia: String!
  # Geojson object in string format
  geometry: String!
  # Node ids are unique between nodes. (However, a way or a relation can have the same id number as a node.) Editors may temporarily save node ids as negative to denote ids that haven't yet been saved to the server. Node ids on the server are persistent, meaning that the assigned id of an existing node will remain unchanged each time data are added or corrected. Deleted node ids must not be reused, unless a former node is now undeleted.
  osmId: String!
  # see OSM wiki https://wiki.openstreetmap.org/wiki/Changeset
  changeset: Int!
  # The edit version of the object. Newly created objects start at version 1 and the value is incremented by the server when a client uploads a new version of the object. The server will reject a new version of an object if the version sent by the client does not match the current version of the object in the database.
  version: Int!
  # W3C standard date and time formats. https://www.w3.org/TR/NOTE-datetime Time of the last modification (e.g. "2016-12-31T23:59:59.999Z").
  timestamp: String!
  # A set of key/value pairs, with unique key
  tags: String!
  # The key type is commonly used to set a relation's type. https://wiki.openstreetmap.org/wiki/Key:type
  osm_type: String!
  # This tag is for indication that a map entity such as a building, a shop, restaurant, etc. offers internet access to the public, either as a paid service or even for free.
  internet_access: String!
  # The key craft=* is used for a place producing or processing customized goods.
  craft: String!
}

input ReadIDInput {
    eq: ID!
    gt: ID!
    gte: ID!
    lt: ID!
    contains: ID!
}

input OrderNodeInput {
    id: OrderDirection
    geometry: OrderDirection
    osmId: OrderDirection
    changeset: OrderDirection
    version: OrderDirection
    timestamp: OrderDirection
    tags: OrderDirection
    lat: OrderDirection
    lon: OrderDirection
}

input OrderBuildingInput {
    id: OrderDirection
    phone: OrderDirection
    addr_city: OrderDirection
    addr_country: OrderDirection
    addr_full: OrderDirection
    addr_housenumber: OrderDirection
    addr_housename: OrderDirection
    addr_postcode: OrderDirection
    addr_street: OrderDirection
    addr_place: OrderDirection
    email: OrderDirection
    name: OrderDirection
    opening_hours: OrderDirection
    operator: OrderDirection
    private_or_public: OrderDirection
    url: OrderDirection
    website: OrderDirection
    building: OrderDirection
    amenity: OrderDirection
    building_levels: OrderDirection
    building_material: OrderDirection
    building_min_level: OrderDirection
    height: OrderDirection
    landuse: OrderDirection
    office: OrderDirection
    shop: OrderDirection
    source: OrderDirection
    start_date: OrderDirection
    wikipedia: OrderDirection
    osmId: OrderDirection
    timestamp: OrderDirection
    version: OrderDirection
    geometry: OrderDirection
    tags: OrderDirection
    osm_type: OrderDirection
    internet_access: OrderDirection
    changeset: OrderDirection
    craft: OrderDirection
}


input OrderPointOfInterestInput {
    id: OrderDirection
    addr_full: OrderDirection
    addr_city: OrderDirection
    addr_country: OrderDirection
    addr_housenumber: OrderDirection
    addr_housename: OrderDirection
    addr_postcode: OrderDirection
    addr_street: OrderDirection
    addr_place: OrderDirection
    email: OrderDirection
    name: OrderDirection
    opening_hours: OrderDirection
    operator: OrderDirection
    phone: OrderDirection
    private_or_public: OrderDirection
    url: OrderDirection
    website: OrderDirection
    building: OrderDirection
    amenity: OrderDirection
    building_levels: OrderDirection
    landuse: OrderDirection
    office: OrderDirection
    shop: OrderDirection
    source: OrderDirection
    start_date: OrderDirection
    wikipedia: OrderDirection
    osmId: OrderDirection
    timestamp: OrderDirection
    version: OrderDirection
    geometry: OrderDirection
    tags: OrderDirection
    osm_type: OrderDirection
    internet_access: OrderDirection
    changeset: OrderDirection
    craft: OrderDirection
    lat: OrderDirection
    lon: OrderDirection
    atm: OrderDirection
    bicycle_parking: OrderDirection
    cafe: OrderDirection
    childcare: OrderDirection
    parking: OrderDirection
    social_facility: OrderDirection
    books: OrderDirection
    butcher: OrderDirection
    clothes: OrderDirection
    erotic: OrderDirection
    religion: OrderDirection
    second_hand: OrderDirection
    information: OrderDirection
    tourism: OrderDirection
    bicycle: OrderDirection
    coffee: OrderDirection
    collector: OrderDirection
    dry_cleaning: OrderDirection
    fuel: OrderDirection
    furniture: OrderDirection
    massage: OrderDirection
    motorcycle: OrderDirection
    music: OrderDirection
    organic: OrderDirection
    outdoor: OrderDirection
    pet: OrderDirection
    trade: OrderDirection
    wine: OrderDirection
    attraction: OrderDirection
    museum: OrderDirection
    bar: OrderDirection
    car_wash: OrderDirection
    drinking_water: OrderDirection
    leisure: OrderDirection
    outdoor_seating: OrderDirection
    playground: OrderDirection
    caravan: OrderDirection
    golf: OrderDirection
    swimming_pool: OrderDirection
    water: OrderDirection
    wholesale: OrderDirection
    viewpoint: OrderDirection
    zoo: OrderDirection
    gambling: OrderDirection
    theatre: OrderDirection
    fitness_station: OrderDirection
    poi_type: OrderDirection
}


input OrderEdgeInput {
    id: OrderDirection
    len: OrderDirection
    v: OrderDirection
    u: OrderDirection
    geometry: OrderDirection
    osm_type: OrderDirection
    tags: OrderDirection
    version: OrderDirection
    timestamp: OrderDirection
    osmId: OrderDirection
    width: OrderDirection
    tunnel: OrderDirection
    surface: OrderDirection
    segregated: OrderDirection
    service: OrderDirection
    psv: OrderDirection
    overtaking: OrderDirection
    oneway: OrderDirection
    name: OrderDirection
    motor_vehicle: OrderDirection
    motorcar: OrderDirection
    maxspeed: OrderDirection
    lit: OrderDirection
    lanes: OrderDirection
    int_ref: OrderDirection
    highway: OrderDirection
    footway: OrderDirection
    foot: OrderDirection
    cycleway: OrderDirection
    bridge: OrderDirection
    bicycle: OrderDirection
    area: OrderDirection
    access: OrderDirection
}



input ReadStringInput {
    eq: String
    gt: String
    gte: String
    lt: String
    lte: String
    contains: String
    startsWith: String
    endsWith: String
}

enum OrderDirection {
    ASC
    DESC
}


input ReadIntInput {
    eq: Int!
    gt: Int!
    gte: Int!
    lt: Int!
    lte: Int!
}

input ReadNodeInput {
    id: ReadIDInput
    geometry: ReadStringInput
    osmId: ReadStringInput
    changeset: ReadIntInput
    version: ReadIntInput
    timestamp: ReadStringInput
    tags: ReadStringInput
    lat: ReadStringInput
    lon: ReadStringInput
    and: [ReadNodeInput!]
    or: [ReadNodeInput!]
}


input ReadBuildingInput {
    id: ReadIDInput
    phone: ReadStringInput
    addr_city: ReadStringInput
    addr_country: ReadStringInput
    addr_full: ReadStringInput
    addr_housenumber: ReadStringInput
    addr_housename: ReadStringInput
    addr_postcode: ReadStringInput
    addr_street: ReadStringInput
    addr_place: ReadStringInput
    email: ReadStringInput
    name: ReadStringInput
    opening_hours: ReadStringInput
    operator: ReadStringInput
    private_or_public: ReadStringInput
    url: ReadStringInput
    website: ReadStringInput
    building: ReadStringInput
    amenity: ReadStringInput
    building_levels: ReadStringInput
    building_material: ReadStringInput
    building_min_level: ReadStringInput
    height: ReadStringInput
    landuse: ReadStringInput
    office: ReadStringInput
    shop: ReadStringInput
    source: ReadStringInput
    start_date: ReadStringInput
    wikipedia: ReadStringInput
    osmId: ReadStringInput
    timestamp: ReadStringInput
    version: ReadIntInput
    geometry: ReadStringInput
    tags: ReadStringInput
    osm_type: ReadStringInput
    internet_access: ReadStringInput
    changeset: ReadStringInput
    craft: ReadStringInput
    and: [ReadBuildingInput!]
    or: [ReadBuildingInput!]
}



input ReadPointOfInterestInput {
    id: ReadIDInput
    addr_full: ReadStringInput
    addr_city: ReadStringInput
    addr_country: ReadStringInput
    addr_housenumber: ReadStringInput
    addr_housename: ReadStringInput
    addr_postcode: ReadStringInput
    addr_street: ReadStringInput
    addr_place: ReadStringInput
    email: ReadStringInput
    name: ReadStringInput
    opening_hours: ReadStringInput
    operator: ReadStringInput
    phone: ReadStringInput
    private_or_public: ReadStringInput
    url: ReadStringInput
    website: ReadStringInput
    building: ReadStringInput
    amenity: ReadStringInput
    building_levels: ReadStringInput
    landuse: ReadStringInput
    office: ReadStringInput
    shop: ReadStringInput
    source: ReadStringInput
    start_date: ReadStringInput
    wikipedia: ReadStringInput
    osmId: ReadStringInput
    timestamp: ReadStringInput
    version: ReadIntInput
    geometry: ReadStringInput
    tags: ReadStringInput
    osm_type: ReadStringInput
    internet_access: ReadStringInput
    changeset: ReadIntInput
    craft: ReadStringInput
    lat: ReadStringInput
    lon: ReadStringInput
    atm: ReadStringInput
    bicycle_parking: ReadStringInput
    cafe: ReadStringInput
    childcare: ReadStringInput
    parking: ReadStringInput
    social_facility: ReadStringInput
    books: ReadStringInput
    butcher: ReadStringInput
    clothes: ReadStringInput
    erotic: ReadStringInput
    religion: ReadStringInput
    second_hand: ReadStringInput
    information: ReadStringInput
    tourism: ReadStringInput
    bicycle: ReadStringInput
    coffee: ReadStringInput
    collector: ReadStringInput
    dry_cleaning: ReadStringInput
    fuel: ReadStringInput
    furniture: ReadStringInput
    massage: ReadStringInput
    motorcycle: ReadStringInput
    music: ReadStringInput
    organic: ReadStringInput
    outdoor: ReadStringInput
    pet: ReadStringInput
    trade: ReadStringInput
    wine: ReadStringInput
    attraction: ReadStringInput
    museum: ReadStringInput
    bar: ReadStringInput
    car_wash: ReadStringInput
    drinking_water: ReadStringInput
    leisure: ReadStringInput
    outdoor_seating: ReadStringInput
    playground: ReadStringInput
    caravan: ReadStringInput
    golf: ReadStringInput
    swimming_pool: ReadStringInput
    water: ReadStringInput
    wholesale: ReadStringInput
    viewpoint: ReadStringInput
    zoo: ReadStringInput
    gambling: ReadStringInput
    theatre: ReadStringInput
    fitness_station: ReadStringInput
    poi_type: ReadStringInput
    and: [ReadPointOfInterestInput!]
    or: [ReadPointOfInterestInput!]
}

input ReadEdgeInput {
    id: ReadIDInput
    len: ReadStringInput
    v: ReadStringInput
    u: ReadStringInput
    geometry: ReadStringInput
    osm_type: ReadStringInput
    tags: ReadStringInput
    version: ReadIntInput
    timestamp: ReadStringInput
    osmId: ReadStringInput
    width: ReadStringInput
    tunnel: ReadStringInput
    surface: ReadStringInput
    segregated: ReadStringInput
    service: ReadStringInput
    psv: ReadStringInput
    overtaking: ReadStringInput
    oneway: ReadStringInput
    name: ReadStringInput
    motor_vehicle: ReadStringInput
    motorcar: ReadStringInput
    maxspeed: ReadStringInput
    lit: ReadStringInput
    lanes: ReadIntInput
    int_ref: ReadStringInput
    highway: ReadStringInput
    footway: ReadStringInput
    foot: ReadStringInput
    cycleway: ReadStringInput
    bridge: ReadStringInput
    bicycle: ReadStringInput
    area: ReadStringInput
    access: ReadStringInput
    and: [ReadEdgeInput!]
    or: [ReadEdgeInput!]
}


type Query {
readNode(
search: ReadNodeInput
limit: Int!
offset: Int!
order: OrderNodeInput
): [Node!]!

}

type Query {
readEdge(
search: ReadEdgeInput
limit: Int!
offset: Int!
order: OrderEdgeInput
): [Edge!]!

}

type Query {
readPointOfInterest(
search: ReadPointOfInterestInput
limit: Int!
offset: Int!
order: OrderPointOfInterestInput
): [PointOfInterest!]!
}


type Query {
readBuilding(
search: ReadBuildingInput
limit: Int!
offset: Int!
order: OrderBuildingInput
): [Building!]!
}